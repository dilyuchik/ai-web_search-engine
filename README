# WebCrawler Application  

A simple web crawler application with a user-friendly interface for searching the web. This project is powered by Flask and features speech recognition to facilitate search queries.  
![Home Page](static/Screenshot-1.png)
![Search Results Page](static/Screenshot-2.png)
---

## Features  
- **Search Functionality**: Enter queries in the search bar to find relevant information.  
- **Speech Recognition**: Click the microphone icon to input search queries using voice commands.  
- **Word Correction:** Automatically suggests corrections for misspelled words in search queries.
  

---

## Files Overview  
- `static/logo.png`: Logo displayed at the top of the web page.  
- `static/favicon.ico`: Favicon for the browser tab.  
- `search_engine.py`: The main Flask application file.  
- `templates/home.html`: The HTML template for the application's home page.  
- `templates/search.html`: The HTML template for the search results page.  
- `crawler.py`: A script for the crawling logic to fetch web data.  
- `requirements.txt`: Contains Python dependencies for the project.  

---

## Prerequisites  
Ensure you have the following installed:  
- Python 3.7 or higher  
- pip (Python package manager)  

---

## How to Run the Application  

1. **Clone the Repository**:
   git clone https://github.com/dilyuchik/ai-web_search-engine.git
   cd ai-web_search-engine

2. **Set Up a Virtual Environment (Optional but Recommended)**:
   python3 -m venv venv
   source venv/bin/activate   # On Windows: venv\Scripts\activate


3. **Install Dependencies**:
   pip install -r requirements.txt

4. **Run the Flask App**:
   cd submission
   flask --app=search_engine.py run
   
   The application will be accessible at `http://127.0.0.1:5000/`.

5. **Testing the Application**:
   - Open a browser and go to `http://127.0.0.1:5000/`.
   - Use the search bar or speech recognition to test the features.

6. **Stopping the Application**:
   Press `Ctrl+C` in the terminal to stop the server.
