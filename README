-- STEP BY STEP GUIDE FOR TASK 2 --
=============================

Build a search engine with all four components:
- Crawler
- Index
- Query parser and search algorithm
- User Frontend

Demonstrate it by crawling one website and making its content available to the user via a web frontend with a simple search form. 
Make the result available on the provided demo server.
Submit the code and the link to the demo deployment.

 
Suggested order of building:

Week 1 of project:
1 Create a working environment on your computers
2 Create a repository (Gitlab, Github, â€¦) for your project 2 and make sure all group members can access it
3 Start with adding a .gitignore and a requirements.txt file to the repository (requirements are requests and beautifulsoup4)
4 Create a `crawler.py` file and define the skeleton of the crawling algorithm: 
    4.1 Crawl (=get and parse) all HTML pages on a certain server 
    4.2 that can directly or indirectly be reached from a start URL 
    4.3 by following links on the pages. 
    4.4 Do not follow links to URLs on other servers and only process HTML responses. 
    4.5 Test the crawler with a simple website, e.g., https://vm009.rz.uos.de/crawl/index.html 
5 Build an in-memory index from the HTML text content found. 
    5.1 The most straightforward index is a dictionary with words as keys and lists of URLs that refer to pages     that include the word.
6 Add a function 'search' that takes a list of words as a parameter and returns (by using the index) a list of links to all pages that contain all the words from the list. 
7 Test the functionality.

Don't worry if you don't get that far! Use the element chat and the Friday session to ask questions, report problems and tell about hurdles and obstacles!

Week 2:
1 Replace the simple index with code using the woosh library (will be introduced in week 6 - https://whoosh.readthedocs.io/en/latest/intro.html ).
2 Build a flask app (will be introduced in week 6) with two URLs that show the following behavior:
    2.1 GET home URL: Show search form
    2.2 GET search URL with parameter q: Search for q using the index and display a list of URLs as links

Week 3:
1 Improve the index by adding information (ideas will be presented in week 7)
2 Improve the output by including title and teaser text
3 Install your search engine on the demo server provided (will be introduced in week 7)